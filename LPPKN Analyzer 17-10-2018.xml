<channelGroup version="3.5.1">
  <id>c18cdd1c-9e11-4d48-a977-be0caccc46cd</id>
  <name>LPPKN Analyzer</name>
  <revision>1</revision>
  <lastModified>
    <time>1535344298119</time>
    <timezone>Asia/Kuala_Lumpur</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="3.5.1">
      <id>80b3aa2d-e467-4079-96b0-318ddd015e2a</id>
      <nextMetaDataId>6</nextMetaDataId>
      <name>APPS REQUEST</name>
      <description></description>
      <revision>106</revision>
      <sourceConnector version="3.5.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.5.1">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.5.1">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="3.5.1">
            <host>0.0.0.0</host>
            <port>23111</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.5.1">
            <responseVariable>Postprocessor</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>false</xmlBody>
          <parseMultipart>true</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
          <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode></responseStatusCode>
          <responseHeaders class="linked-hash-map"/>
          <charset>UTF-8</charset>
          <contextPath></contextPath>
          <timeout>0</timeout>
          <staticResources/>
        </properties>
        <transformer version="3.5.1">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <name>GENERAL FUNCTIONS</name>
              <sequenceNumber>0</sequenceNumber>
              <script>function executeQuery(query,queryParameters){
	var dbConn;
	try {
		dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://172.19.64.7:3306/integdb&apos;,&apos;root&apos;,&apos;Root@!23&apos;);
		var result = dbConn.executeCachedQuery(query,queryParameters);
		return result;
	} finally {
		if (dbConn) { 
			dbConn.close();
		}
	}
}

function getSingleData(query, queryParameters){
	var result = executeQuery(query, queryParameters)
	var single = &apos;&apos;
	while(result.next()){
		single = result.getString(1)
	}
	return single
}

function executeInsertQuery(query,queryParameters){
	var dbConn;
	try {
		dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://172.19.64.7:3306/integdb&apos;,&apos;root&apos;,&apos;Root@!23&apos;);
		var result = dbConn.executeUpdate(query,queryParameters);
		return result;
	} finally {
		if (dbConn) { 
			dbConn.close();
		}
	}
}

function finalResponse(jsonString){
	channelMap.put(&apos;responseContent&apos;, JSON.stringify(jsonString));
	channelMap.put(&apos;responseContentType&apos;, &apos;application/fhir+json&apos;);
}

function successPost(someData){
	var data = {
		status_code: someData.status_code,
		status_message: someData.status_message,
		data_entry: someData.data_entry
	};
	channelMap.put(&apos;responseContent&apos;, JSON.stringify(data));
	channelMap.put(&apos;responseContentType&apos;, &apos;application/json&apos;);	
}

function parameterTest(bool){
	if(bool!==null){
		return true;
	} else {
		return false;
	}
}

globalMap.put(&apos;functionExecuteQuery&apos;, validate(executeQuery,&apos;&apos;, new Array()));
globalMap.put(&apos;functionInsertInsertQuery&apos;, validate( executeInsertQuery, &apos;&apos;, new Array()));
globalMap.put(&apos;finalResponse&apos;, validate(finalResponse,&apos;&apos;, new Array()));
globalMap.put(&apos;successPost&apos;, validate(successPost,&apos;&apos;, new Array()));
globalMap.put(&apos;functParameterTest&apos;,  validate(parameterTest, &apos;&apos;, new Array()));
globalMap.put(&apos;singleData&apos;, validate(getSingleData, &apos;&apos;, new Array()));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <name>ROUTER CONTROLLER</name>
              <sequenceNumber>1</sequenceNumber>
              <script>var contextPath = sourceMap.get(&apos;contextPath&apos;);
var pathParam = contextPath.split(&apos;/&apos;);

var routePath = String(pathParam[1]);

switch(routePath){
	case &apos;new-order&apos;:
		destinationSet.removeAllExcept(1);
		break;
	case &apos;order-list&apos;:
		destinationSet.removeAllExcept(2);
		break;
	case &apos;order-result&apos;:
		destinationSet.removeAllExcept(3);
		break;
	case &apos;order-info&apos;:
		destinationSet.removeAllExcept(3);
		break;
	case &apos;result&apos;:
		destinationSet.removeAllExcept(4);
		break;
	case &apos;test-code&apos;:
		destinationSet.removeAllExcept(5);
		break;
	default:
		destinationSet.removeAll();
		break;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <name>RESULT MAPPER</name>
              <sequenceNumber>2</sequenceNumber>
              <script>function cobas311_result(result_data){
	var query = &quot;SELECT test_name FROM lppkn_test_code WHERE app_code = ? &quot;
	var test_code = String(result_data.universal_test_id).replace(/[^0-9\.]+/g, &apos;&apos;)
	var queryParams = [test_code]
	test_name = $(&apos;singleData&apos;)(query, queryParams)
	var data = {
		unit: result_data.unit,
		cobas311_test_code: test_code,
		rhis_test_code: test_code,
		test_name: test_name,
		measurement_value: result_data.measurement_value,
		value: result_data.measurement_value + &apos; &apos; + result_data.unit
	}
	return data
}

function deviceResultMapper(device_id, json_data){
	var result_data = JSON.parse(json_data)
	var result = {}
	var device = String(device_id)
	switch(device){
		case &apos;3&apos;:
			result = cobas311_result(result_data)
			break;
		default:
			break;
	}
	
	return result
}

channelMap.put(&apos;device_result_mapper&apos;, validate(deviceResultMapper,&apos;&apos;, new Array()));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>RAW</inboundDataType>
          <outboundDataType>RAW</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.5.1">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.5.1">
          <metaDataId>1</metaDataId>
          <name>CREATE NEW ORDER</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.5.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.5.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.5.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
                <name>INSERT NEW ORDER</name>
                <sequenceNumber>0</sequenceNumber>
                <script>if(sourceMap.get(&apos;method&apos;)==&apos;POST&apos;){

	if(connectorMessage.getRawData() != &apos;&apos;){
		var data = JSON.parse(connectorMessage.getRawData());
		
		var request_ip = sourceMap.get(&apos;remoteAddress&apos;).toString();
		var order_no = data[&apos;order_id&apos;];
		var order_detail = JSON.stringify(data);
		var device_code = &quot;&quot;;

		var query = &quot;INSERT INTO lppkn_orders (request_ip, order_no, order_detail, device_code) VALUES (?,?,?,?)&quot;
		var queryParameters = [request_ip, order_no, order_detail, device_code];
		
		$(&apos;functionInsertInsertQuery&apos;)(query,queryParameters);

		var successPost = {
			status_code: 200,
			status_message: &quot;New order created, order no, &quot; + order_no,
			data_entry: data
		};
		
		$(&apos;successPost&apos;)(successPost);
	}
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
                <name>INSERT NEW ORDER DEVICE</name>
                <sequenceNumber>1</sequenceNumber>
                <script>if(sourceMap.get(&apos;method&apos;)==&apos;POST&apos;){

	if(connectorMessage.getRawData() != &apos;&apos;){
		var data = JSON.parse(connectorMessage.getRawData());

		var lis_lab_id = data.lis_lab_id
		var test_array = []

		var device_id = &quot;&quot;
		var device_test_code = &quot;&quot;

		var status_code = data.status_code
			
		Object.keys(data.test_code).map(function(v,k){
			var test_code = data.test_code[k]
			var selectQuery = &quot;SELECT device_id, test_code, test_array FROM lppkn_test_group WHERE ris_code = ? &quot;;
			var selectQueryParams = [test_code]
	
			var result = $(&apos;functionExecuteQuery&apos;)(selectQuery,selectQueryParams);
			
			while(result.next()){
				device_id = result.getString(1)
				device_test_code = result.getString(2)
				test_array.push(result.getString(3))
			}	
		})
		var test_combine = test_array.join(&apos;\\&apos;)
		
		var insertQuery = &quot;INSERT INTO lppkn_device_order &quot;
		insertQuery += &quot;(device_id, test_code, lis_lab_id, lab_test_array, status_code) VALUE (?,?,?,?,?)&quot;
		var insertQueryParams = [device_id, data.test_code.toString(), lis_lab_id, test_combine, status_code];
		$(&apos;functionInsertInsertQuery&apos;)(insertQuery,insertQueryParams);
	}
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImxhYl9uYW1lIjoibGFiIG5hbWUgaW5wdXQiLAoJInRlc3RfbmFtZSI6InRlc3QgbmFtZSBp
bnB1dCIsCgkiYWRkaXRpb25hbF9pbmZvIjoiYWRkaXRpb25hbCBkYXRhIGlucHV0IiwKCSJwZXJm
b3JtaW5nX2xvY2F0aW9uIjoicGVyZm9ybWluZyBsb2NhdGlvbiIsCgkiY29udGFpbmVyIjoiY29u
dGFpbmVyIGlucHV0IiwKCSJzcGVjaW1lbiI6InNwZWNpbWVuIiwKCSJwcmlvcml0eSI6InByaW9y
aXR5IGlucHV0IiwKCSJwYXRpZW50X3ByZXBhcmF0aW9uX2luc3RydWN0aW9uIjoicGF0aWVudCBw
cmVwYXJhdGlvbiBpbnN0cnVjdGlvbiBpbnB1dCIsCgkiY2xpbmljYWxfbm90ZXMiOiJjbGluaWMg
bm90ZXMgaW5wdXQiLAoJInBsYW5uZWRfZGF0ZSI6InBsYW5uZWQgZGF0ZSBpbnB1dCIsCgkib3Jk
ZXJfYnkiOiJvcmRlciBieSBpbnB1dCIsCgkic3BlY2ltZW5faWQiOiJzcGVjaW1lbiBpZCBpbnB1
dCIsCgkib3JkZXJfaWQiOiJvcmRlciBpZCBpbnB1dCIKfQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.5.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.5.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.5.1">
          <metaDataId>2</metaDataId>
          <name>GET ORDER LIST</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.5.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.5.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.5.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
                <sequenceNumber>0</sequenceNumber>
                <script>if(sourceMap.get(&apos;method&apos;)==&apos;GET&apos;){
	var query = &quot;SELECT order_detail, order_status FROM lppkn_orders &quot;
	var queryParameters = [];
	
	if($(&apos;functParameterTest&apos;)(sourceMap.get(&apos;parameters&apos;).getParameter(&apos;order_id&apos;))){
		query += (queryParameters.length==0) ? &apos; WHERE &apos; : &apos; AND &apos;;
		query += &apos;order_no = ? &apos;;
		queryParameters.push(sourceMap.get(&apos;parameters&apos;).getParameter(&apos;order_id&apos;));
	}

	var result = $(&apos;functionExecuteQuery&apos;)(query,queryParameters);

	var responseData = [];
	while(result.next()){
		var infoParse = JSON.parse(result.getString(1));
		infoParse.status = result.getString(2);
		responseData.push(infoParse);
	}

	var finalResult = {
		status_code: 200,
		result: responseData};
	$(&apos;finalResponse&apos;)(finalResult);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.5.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.5.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.5.1">
          <metaDataId>3</metaDataId>
          <name>GET ORDER RESULT</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.5.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.5.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.5.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
                <sequenceNumber>0</sequenceNumber>
                <script>if(sourceMap.get(&apos;method&apos;)==&apos;GET&apos;){
	var query = &quot;SELECT order_detail, order_status FROM lppkn_order_result &quot;
	var queryParameters = [];
	
	if($(&apos;functParameterTest&apos;)(sourceMap.get(&apos;parameters&apos;).getParameter(&apos;order_id&apos;))){
		query += (queryParameters.length==0) ? &apos; WHERE &apos; : &apos; AND &apos;;
		query += &apos;order_no = ? &apos;;
		queryParameters.push(sourceMap.get(&apos;parameters&apos;).getParameter(&apos;order_id&apos;));
	}

	var result = $(&apos;functionExecuteQuery&apos;)(query,queryParameters);

	var responseData = [];
	while(result.next()){
		var infoParse = JSON.parse(result.getString(1));
		infoParse.status = result.getString(2);
		responseData.push(infoParse);
	}

//	var responseData = {
//		output: &quot;no data resolved for now! try later&quot;
//	}

	var finalResult = {
		status_code: 200,
		result: responseData};
	$(&apos;finalResponse&apos;)(finalResult);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.5.1">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.5.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.5.1">
          <metaDataId>4</metaDataId>
          <name>GET TEST RESULT</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.5.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.5.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.5.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
                <sequenceNumber>0</sequenceNumber>
                <script>if(sourceMap.get(&apos;method&apos;)==&apos;GET&apos;){

	var lis_lab_id = sourceMap.get(&apos;parameters&apos;).getParameter(&apos;lis_lab_id&apos;).toString();
	var status_code = sourceMap.get(&apos;parameters&apos;).getParameter(&apos;status_code&apos;).toString();
	
	var getTCquery = &quot;SELECT transaction_code FROM lppkn_astm &quot;;
	getTCquery 	+= &quot;WHERE record_type = &apos;ORDER&apos; &quot;;
	getTCquery	+= &apos;AND json_data-&gt;&quot;$.specimen_id&quot; LIKE &quot;%&apos; + lis_lab_id + &apos;%&quot; &apos;;
	getTCquery	+= &apos;AND status_code = &quot;&apos;+ status_code +&apos;&quot; &apos;
	getTCquery	+= &quot;ORDER BY id DESC LIMIT 1&quot;;
	
	var query = &quot;SELECT transaction_code, device_id, result FROM lppkn_result &quot;;
	query += &quot;WHERE transaction_code = (&quot; + getTCquery + &quot;)&quot;;

	var queryParameters = []
	var result = $(&apos;functionExecuteQuery&apos;)(query, queryParameters);
	var countResult = result.size();
	var count = 1;

	var result_response = {}
	var exam_result = [];
	
	while (result.next()){
		if (count == 1){
			result_response = {
				transaction_code: result.getString(1),
				status_code: sourceMap.get(&apos;parameters&apos;).getParameter(&apos;status_code&apos;).toString(),
				device_id: result.getString(2),
				lis_lab_id: lis_lab_id,
				lab_unit_code: lis_lab_id.substring(0,2),
				lab_test_code: lis_lab_id.substring(2,4)
			}
		}
		result_to_map = $(&apos;device_result_mapper&apos;)(result.getString(2), result.getString(3))
//		exam_result.push(JSON.parse(result.getString(3)))
		exam_result.push(result_to_map)
		count++
	}

	if (result.size()&gt;0){
		result_response[&apos;result&apos;] = exam_result;
	} else {
		result_response = {
			message: &quot;No result found(s) for this specimen id&quot;
		}
	}

	$(&apos;finalResponse&apos;)(result_response);	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.5.1">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.5.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.5.1">
          <metaDataId>5</metaDataId>
          <name>GET TEST CODE</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.5.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.5.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.5.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
                <sequenceNumber>0</sequenceNumber>
                <script>if(sourceMap.get(&apos;method&apos;)==&apos;GET&apos;){

	var query = &quot;SELECT device_code, device_name, test_name, app_code, host_code, ris_code  FROM lppkn_test_code &quot;;
	var queryParameters = []
	var result = $(&apos;functionExecuteQuery&apos;)(query, queryParameters);
	var countResult = result.size();
	var count = 1;

	var result_response = {}
	var exam_result = [];
	
	while (result.next()){
		result_response = {
			device_code: result.getString(1),
			device_name: result.getString(2),
			test_name: result.getString(3),
			app_code: result.getString(4),
			host_code: result.getString(5),
			rhis_code: result.getString(6)
		}
		exam_result.push(result_response)
	}
	$(&apos;finalResponse&apos;)(exam_result);	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.5.1">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.5.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>var getResponseContent = channelMap.get(&apos;responseContent&apos;);
if(getResponseContent!=null){
	return channelMap.get(&apos;responseContent&apos;).toString();	
} else {
	return;
}
</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.5.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.5.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1539677918784</time>
            <timezone>Asia/Kuala_Lumpur</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
      </exportData>
    </channel>
    <channel version="3.5.1">
      <id>5ab18261-3a29-4157-a4ad-b4e76f952196</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>MACHINE REQUEST</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="3.5.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.5.1">
          <pluginProperties/>
          <sourceConnectorProperties version="3.5.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.5.1">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <name>GENERAL FUNCTION</name>
              <sequenceNumber>0</sequenceNumber>
              <script>function executeQuery(query,queryParameters){
	var dbConn;
	try {
		dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://172.19.64.7:3306/integdb&apos;,&apos;root&apos;,&apos;Root@!23&apos;);
		var result = dbConn.executeCachedQuery(query,queryParameters);
		return result;
	} finally {
		if (dbConn) { 
			dbConn.close();
		}
	}
}

function executeInsertQuery(query,queryParameters){
	var dbConn;
	try {
		dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://172.19.64.7:3306/integdb&apos;,&apos;root&apos;,&apos;Root@!23&apos;);
		var result = dbConn.executeUpdate(query,queryParameters);
		return result;
	} finally {
		if (dbConn) { 
			dbConn.close();
		}
	}
}

function finalResponse(jsonString){
	channelMap.put(&apos;responseContent&apos;, JSON.stringify(jsonString));
	channelMap.put(&apos;responseContentType&apos;, &apos;application/fhir+json&apos;);
}

function successPost(someData){
	var data = {
		status_code: someData.status_code,
		status_message: someData.status_message,
		data_entry: someData.data_entry
	};
	channelMap.put(&apos;responseContent&apos;, JSON.stringify(data));
	channelMap.put(&apos;responseContentType&apos;, &apos;application/json&apos;);	
}

function parameterTest(bool){
	if(bool!==null){
		return true;
	} else {
		return false;
	}
}

globalMap.put(&apos;functionExecuteQuery&apos;, validate(executeQuery,&apos;&apos;, new Array()));
globalMap.put(&apos;functionInsertInsertQuery&apos;, validate( executeInsertQuery, &apos;&apos;, new Array()));
globalMap.put(&apos;finalResponse&apos;, validate(finalResponse,&apos;&apos;, new Array()));
globalMap.put(&apos;successPost&apos;, validate(successPost,&apos;&apos;, new Array()));
globalMap.put(&apos;functParameterTest&apos;,  validate(parameterTest, &apos;&apos;, new Array()));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <name>ROUTER CONTROLLER</name>
              <sequenceNumber>1</sequenceNumber>
              <script>var contextPath = sourceMap.get(&apos;contextPath&apos;);
var pathParam = contextPath.split(&apos;/&apos;);

var routePath = String(pathParam[1]);

switch(routePath){
	case &apos;new-inquiry&apos;:
		destinationSet.removeAllExcept(1);
		break;
	default:
		destinationSet.removeAll();
		break;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>RAW</inboundDataType>
          <outboundDataType>RAW</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.5.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.5.1">
          <metaDataId>1</metaDataId>
          <name>Machine Inquiry</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.5.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.5.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.5.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
                <name>NEW INQUIRY</name>
                <sequenceNumber>0</sequenceNumber>
                <script>if(sourceMap.get(&apos;method&apos;)==&apos;POST&apos;){

	if(connectorMessage.getRawData() != &apos;&apos;){
		var data = JSON.parse(connectorMessage.getRawData());

		var machine_code = data[&apos;order_id&apos;];
		var machine_name = data[&apos;machine_name&apos;];
		var header_message = data[&apos;header_message&apos;];

		var query = &quot;INSERT INTO lppkn_machine_inquiry (machine_code, machine_name, header_message) VALUES (?,?,?)&quot;
		var queryParameters = [machine_code, machine_name, header_message];
		
		$(&apos;functionInsertInsertQuery&apos;)(query,queryParameters);

		var successPost = {
			status_code: 200,
			status_message: &quot;New order inquiry created &quot;,
			data_entry: data
		};
		$(&apos;successPost&apos;)(successPost);
	}
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.5.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.5.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.5.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.5.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1535343071744</time>
            <timezone>Asia/Singapore</timezone>
          </lastModified>
        </metadata>
      </exportData>
    </channel>
  </channels>
</channelGroup>